#ifndef SCANPACKER_H
#define SCANPACKER_H

//////////////////////////////////////////////////////////////////////////////
/**
* @file   IScanPacker.h
* @author Roberto Torío (roberto.torio-pastor@hp.com)
* @date   Tue Jan 29 12:13:33 CEST 2019
* @brief  Scan jobs interface.
*
* @par &copy; Copyright Hewlett-Packard Company, 2000-2019.
* All rights reserved. Copying or other reproduction of this program except
* for archival purposes is prohibited without written consent of
* Hewlett-Packard Company.
*/
//////////////////////////////////////////////////////////////////////////////

#include "HplfpsdkTypes.h"
#include <cstring>

namespace HPLFPSDK
{

    /**
    * @brief The IScanPacker provides the interface to scan using the HPLFPSDK and the
    * embbeded scanner on MFP HP printers
    * It proposes methods create a scan session, get the scanner status and capabilities
    * and retreive the results
    */
    class IScanPacker
    {
    public:
        class IScanSettings;

        /**
        * Function pointer to the data retrieval callback
        * @param[in] userData the same userData used in the endScan function
        * @param[in] data byte array with the data received.
        * This allocated memory will be released automatically once the callback returns.
        * @param[in] dataLength length of the data array.
        * @param[in] lastData the resulting scan can be large enough data to need several calls to the
        * callback. The lastData parameter will be set to true to mark the end of the scan data document.
        */
        typedef void(*onReceiveDataCallback)(void *userData, const char *data, size_t dataLength, bool lastData);

        /**
        * @brief getScanSettingsContainer requests for an object containing the setting parameters
        * @details Scan settings are mandatory to create a job, they must comply with the printer accepted values\n
        * The client is not responsible for the cleaning of IScanSettings.\n
        * Instead, the resources of an IScanSettings object are released by the HPLFKSDK when a new IScanSettings container is requested by the client for the same ScanPacker,
        * or when the IScanPacker object is discarded with the discardScanPacker API.\n
        * Consequently, the pointer returned in a previous call will no longer be valid
        * after the next call to this method.
        * @return scanSettings object or NULL if unable to create the object
        */
        virtual IScanSettings* getScanSettingsContainer() = 0;

        /**
        * @brief Starts a scan job
        * @param[in] scanSettings scan configuration parameters.
        * @param[out] jobUuid UUID of the scan job generated.
        * @param[out] jobUuidLength size in bytes of the jobUuid parameter.
        * @return result of the operation.
        *- Types::RESULT_OK if the command is successfully issued.
        *- Types::RESULT_ERROR if the printer could not start the scan.
        *- Types::RESULT_ERROR_INVALID_USAGE_SEQUENCE if the command could not be sent to the printer due to incorrect usage sequence.
        *- Types::RESULT_ERROR_SERVICE_UNAVAILABLE if the printer Secure Webscan option is not active.
        *- Types::RESULT_ERROR_MEMORY if there was a problem with the memory allocation.
        *- Types::RESULT_ERROR_CONNECTION if the command could not be sent to the printer due to connection errors.
        *- Types::RESULT_NOT_SUPPORTED if the printer does not support this function.
        */
        virtual Types::Result startScan(IScanSettings *scanSettings, char **jobUuid, size_t &jobUuidLength) = 0;

        /**
        * @brief Finishes a scan job
        * @param[in] callback callback to get the retrieved documents.
        * @param[in] userData pointer to user defined data. It will be returned on every event generated by the subscription.
        * @return result of the operation.
        *- Types::RESULT_OK if the command is successfully issued.
        *- Types::RESULT_ERROR if the printer could not end the scan.
        *- Types::RESULT_ERROR_INVALID_USAGE_SEQUENCE if the command could not be sent to the printer due to incorrect usage sequence.
        *- Types::RESULT_ERROR_INVALID_PARAMETER if there is no callback.
        *- Types::RESULT_ERROR_SERVICE_UNAVAILABLE if the printer Secure Webscan option is not active or the scan result is not yet ready.
        *- Types::RESULT_ERROR_CONNECTION if the command could not be sent to the printer due to connection errors.
        *- Types::RESULT_NOT_SUPPORTED if the printer does not support this function.
        */
        virtual Types::Result endScan(onReceiveDataCallback callback, void *userData) = 0;

        /**
        * @brief Cancels the current scan job
        * @return result of the operation.
        *- Types::RESULT_OK if the command is successfully issued
        *- Types::RESULT_ERROR if the printer could not cancel the scan.
        *- Types::RESULT_ERROR_INVALID_USAGE_SEQUENCE if the command could not be sent to the printer due to incorrect usage sequence.
        *- Types::RESULT_ERROR_SERVICE_UNAVAILABLE if the printer Secure Webscan option is not active.
        *- Types::RESULT_ERROR_CONNECTION if the command could not be sent to the printer due to connection errors.
        *- Types::RESULT_NOT_SUPPORTED if the printer does not support this function.
        */
        virtual Types::Result cancelScan() = 0;

        /**
        * @brief Gets the capabilities of the scanner
        * @param[out] scannerCapabilities XML with the list of capabilities of the scanner.
        * @param[out] scannerCapabilitiesLength size in bytes of the scannerCapabilities parameter.
        * @return result of the operation.
        *- Types::RESULT_OK if the command is successfully issued
        *- Types::RESULT_ERROR if the printer could not cancel the scan.
        *- Types::RESULT_ERROR_CONNECTION if the command could not be sent to the printer due to connection errors.
        *- Types::RESULT_ERROR_SERVICE_UNAVAILABLE if the printer Secure Webscan option is not active.
        *- Types::RESULT_NOT_SUPPORTED if the printer does not support this function.
        */
        virtual Types::Result getScannerCapabilities(char **scannerCapabilities, size_t &scannerCapabilitiesLength) = 0;

        /**
        * @brief Gets the status of the scanner and the current job, if any.
        * @param[out] scannerStatus XML with the status of the scanner and the current job, if any.
        * @param[out] scannerStatusLength size in bytes of the scannerStatus parameter.
        * @return result of the operation.
        *- Types::RESULT_OK if the command is successfully issued
        *- Types::RESULT_ERROR if the printer could not cancel the scan.
        *- Types::RESULT_ERROR_CONNECTION if the command could not be sent to the printer due to connection errors.
        *- Types::RESULT_ERROR_SERVICE_UNAVAILABLE if the printer Secure Webscan option is not active.
        *- Types::RESULT_NOT_SUPPORTED if the printer does not support this function.
        */
        virtual Types::Result getStatus(char **scannerStatus, size_t &scannerStatusLength) = 0;
    };
}

#endif // SCANPACKER_H
